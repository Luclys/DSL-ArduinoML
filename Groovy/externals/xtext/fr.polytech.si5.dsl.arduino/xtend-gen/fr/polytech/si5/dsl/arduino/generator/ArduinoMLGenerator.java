/**
 * generated by Xtext 2.23.0
 */
package fr.polytech.si5.dsl.arduino.generator;

import fr.polytech.si5.dsl.arduino.arduinoML.Action;
import fr.polytech.si5.dsl.arduino.arduinoML.Actuator;
import fr.polytech.si5.dsl.arduino.arduinoML.App;
import fr.polytech.si5.dsl.arduino.arduinoML.Brick;
import fr.polytech.si5.dsl.arduino.arduinoML.Sensor;
import fr.polytech.si5.dsl.arduino.arduinoML.Signal;
import fr.polytech.si5.dsl.arduino.arduinoML.State;
import fr.polytech.si5.dsl.arduino.arduinoML.Transition;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class ArduinoMLGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Object root = resource.getContents().get(0);
    if ((!(root instanceof App))) {
      return;
    }
    App app = ((App) root);
    String _name = app.getName();
    String _plus = (_name + ".ino");
    fsa.generateFile(_plus, this.compile(app));
  }
  
  public CharSequence compile(final App app) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//Wiring code generated from an ArduinoML model");
    _builder.newLine();
    _builder.append("// Application name: ");
    String _name = app.getName();
    _builder.append(_name);
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("long debounce = 200;");
    _builder.newLine();
    _builder.append("enum STATE {");
    final Function1<State, String> _function = (State it) -> {
      return it.getName();
    };
    String _join = IterableExtensions.join(ListExtensions.<State, String>map(app.getStates(), _function), ", ");
    _builder.append(_join);
    _builder.append("};");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      State _initial = app.getInitial();
      boolean _tripleNotEquals = (_initial != null);
      if (_tripleNotEquals) {
        _builder.append("STATE currentState = ");
        String _name_1 = app.getInitial().getName();
        _builder.append(_name_1);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      EList<Brick> _bricks = app.getBricks();
      for(final Brick brick : _bricks) {
        CharSequence _declare = this.declare(brick);
        _builder.append(_declare);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("void setup(){");
    _builder.newLine();
    {
      EList<Brick> _bricks_1 = app.getBricks();
      for(final Brick brick_1 : _bricks_1) {
        CharSequence _compile = this.compile(brick_1);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void loop() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("switch(currentState){");
    _builder.newLine();
    {
      EList<State> _states = app.getStates();
      for(final State state : _states) {
        _builder.append("\t");
        CharSequence _compile_1 = this.compile(state);
        _builder.append(_compile_1, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence declare(final Brick b) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((b instanceof Sensor)) {
        CharSequence _declare = this.declare(((Sensor) b));
        _builder.append(_declare);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Brick b) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (b instanceof Actuator) {
      _matched=true;
      _switchResult = this.compile(((Actuator) b));
    }
    if (!_matched) {
      if (b instanceof Sensor) {
        _matched=true;
        _switchResult = this.compile(((Sensor) b));
      }
    }
    _builder.append(_switchResult);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Actuator actuator) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("pinMode(");
    int _pin = actuator.getPin();
    _builder.append(_pin);
    _builder.append(", OUTPUT); // ");
    String _name = actuator.getName();
    _builder.append(_name);
    _builder.append(" [Actuator]");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence declare(final Sensor sensor) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("boolean ");
    String _name = sensor.getName();
    _builder.append(_name);
    _builder.append("BounceGuard = false;");
    _builder.newLineIfNotEmpty();
    _builder.append("long ");
    String _name_1 = sensor.getName();
    _builder.append(_name_1);
    _builder.append("LastDebounceTime = 0;");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Sensor sensor) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("pinMode(");
    int _pin = sensor.getPin();
    _builder.append(_pin);
    _builder.append(", INPUT);  // ");
    String _name = sensor.getName();
    _builder.append(_name);
    _builder.append(" [Sensor]");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final State state) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("case ");
    String _name = state.getName();
    _builder.append(_name);
    _builder.append(":");
    _builder.newLineIfNotEmpty();
    {
      EList<Action> _actions = state.getActions();
      for(final Action action : _actions) {
        _builder.append("\t");
        CharSequence _compile = this.compile(action);
        _builder.append(_compile, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      Transition _transition = state.getTransition();
      boolean _tripleNotEquals = (_transition != null);
      if (_tripleNotEquals) {
        _builder.append("\t");
        CharSequence _compile_1 = this.compile(state.getTransition());
        _builder.append(_compile_1, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("break;");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Transition transition) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = transition.getSensor().getName();
    _builder.append(_name);
    _builder.append("BounceGuard = millis() - ");
    String _name_1 = transition.getSensor().getName();
    _builder.append(_name_1);
    _builder.append("LastDebounceTime > debounce;");
    _builder.newLineIfNotEmpty();
    _builder.append("if( digitalRead(");
    int _pin = transition.getSensor().getPin();
    _builder.append(_pin);
    _builder.append(") == ");
    Signal _value = transition.getValue();
    _builder.append(_value);
    _builder.append(" && ");
    String _name_2 = transition.getSensor().getName();
    _builder.append(_name_2);
    _builder.append("BounceGuard) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_3 = transition.getSensor().getName();
    _builder.append(_name_3, "\t");
    _builder.append("LastDebounceTime = millis();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("currentState = ");
    String _name_4 = transition.getNext().getName();
    _builder.append(_name_4, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Action action) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("digitalWrite(");
    int _pin = action.getActuator().getPin();
    _builder.append(_pin);
    _builder.append(",");
    Signal _value = action.getValue();
    _builder.append(_value);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
