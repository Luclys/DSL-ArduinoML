/*
 * generated by Xtext 2.23.0
 */
package fr.polytech.si5.dsl.arduino.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ArduinoMLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class AppElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.si5.dsl.arduino.ArduinoML.App");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAppKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cInitialKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cStateKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInitialAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cInitialStateCrossReference_4_0 = (CrossReference)cInitialAssignment_4.eContents().get(0);
		private final RuleCall cInitialStateIDTerminalRuleCall_4_0_1 = (RuleCall)cInitialStateCrossReference_4_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cBricksKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBricksAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBricksBrickParserRuleCall_7_0 = (RuleCall)cBricksAssignment_7.eContents().get(0);
		private final Assignment cBricksAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBricksBrickParserRuleCall_8_0 = (RuleCall)cBricksAssignment_8.eContents().get(0);
		private final Keyword cStatesKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cStatesAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cStatesStateParserRuleCall_10_0 = (RuleCall)cStatesAssignment_10.eContents().get(0);
		private final Assignment cStatesAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cStatesStateParserRuleCall_11_0 = (RuleCall)cStatesAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//App:
		//	'app' name=ID 'initial' 'state' initial=[State]
		//	'{'
		//	'bricks'
		//	bricks+=Brick
		//	bricks+=Brick*
		//	'states'
		//	states+=State
		//	states+=State*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'app' name=ID 'initial' 'state' initial=[State] '{' 'bricks' bricks+=Brick bricks+=Brick* 'states' states+=State
		//states+=State* '}'
		public Group getGroup() { return cGroup; }
		
		//'app'
		public Keyword getAppKeyword_0() { return cAppKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'initial'
		public Keyword getInitialKeyword_2() { return cInitialKeyword_2; }
		
		//'state'
		public Keyword getStateKeyword_3() { return cStateKeyword_3; }
		
		//initial=[State]
		public Assignment getInitialAssignment_4() { return cInitialAssignment_4; }
		
		//[State]
		public CrossReference getInitialStateCrossReference_4_0() { return cInitialStateCrossReference_4_0; }
		
		//ID
		public RuleCall getInitialStateIDTerminalRuleCall_4_0_1() { return cInitialStateIDTerminalRuleCall_4_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//'bricks'
		public Keyword getBricksKeyword_6() { return cBricksKeyword_6; }
		
		//bricks+=Brick
		public Assignment getBricksAssignment_7() { return cBricksAssignment_7; }
		
		//Brick
		public RuleCall getBricksBrickParserRuleCall_7_0() { return cBricksBrickParserRuleCall_7_0; }
		
		//bricks+=Brick*
		public Assignment getBricksAssignment_8() { return cBricksAssignment_8; }
		
		//Brick
		public RuleCall getBricksBrickParserRuleCall_8_0() { return cBricksBrickParserRuleCall_8_0; }
		
		//'states'
		public Keyword getStatesKeyword_9() { return cStatesKeyword_9; }
		
		//states+=State
		public Assignment getStatesAssignment_10() { return cStatesAssignment_10; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_10_0() { return cStatesStateParserRuleCall_10_0; }
		
		//states+=State*
		public Assignment getStatesAssignment_11() { return cStatesAssignment_11; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_11_0() { return cStatesStateParserRuleCall_11_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class BrickElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.si5.dsl.arduino.ArduinoML.Brick");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cActuatorParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cSensorParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPinAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPinINTTerminalRuleCall_3_0 = (RuleCall)cPinAssignment_3.eContents().get(0);
		
		//Brick:
		//	(Actuator | Sensor) name=ID ':' pin=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//(Actuator | Sensor) name=ID ':' pin=INT
		public Group getGroup() { return cGroup; }
		
		//(Actuator | Sensor)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//Actuator
		public RuleCall getActuatorParserRuleCall_0_0() { return cActuatorParserRuleCall_0_0; }
		
		//Sensor
		public RuleCall getSensorParserRuleCall_0_1() { return cSensorParserRuleCall_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//pin=INT
		public Assignment getPinAssignment_3() { return cPinAssignment_3; }
		
		//INT
		public RuleCall getPinINTTerminalRuleCall_3_0() { return cPinINTTerminalRuleCall_3_0; }
	}
	public class ActuatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.si5.dsl.arduino.ArduinoML.Actuator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActuatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActuatorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Actuator:
		//	{Actuator}
		//	'Actuator';
		@Override public ParserRule getRule() { return rule; }
		
		//{Actuator} 'Actuator'
		public Group getGroup() { return cGroup; }
		
		//{Actuator}
		public Action getActuatorAction_0() { return cActuatorAction_0; }
		
		//'Actuator'
		public Keyword getActuatorKeyword_1() { return cActuatorKeyword_1; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.si5.dsl.arduino.ArduinoML.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSensorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSensorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Sensor:
		//	{Sensor}
		//	'Sensor';
		@Override public ParserRule getRule() { return rule; }
		
		//{Sensor} 'Sensor'
		public Group getGroup() { return cGroup; }
		
		//{Sensor}
		public Action getSensorAction_0() { return cSensorAction_0; }
		
		//'Sensor'
		public Keyword getSensorKeyword_1() { return cSensorKeyword_1; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.si5.dsl.arduino.ArduinoML.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionsActionParserRuleCall_2_0 = (RuleCall)cActionsAssignment_2.eContents().get(0);
		private final Assignment cActionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionsActionParserRuleCall_3_0 = (RuleCall)cActionsAssignment_3.eContents().get(0);
		private final Assignment cTransitionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTransitionTransitionParserRuleCall_4_0 = (RuleCall)cTransitionAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//State:
		//	name=ID '{'
		//	actions+=Action
		//	actions+=Action*
		//	transition=Transition
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' actions+=Action actions+=Action* transition=Transition '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//actions+=Action
		public Assignment getActionsAssignment_2() { return cActionsAssignment_2; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_2_0() { return cActionsActionParserRuleCall_2_0; }
		
		//actions+=Action*
		public Assignment getActionsAssignment_3() { return cActionsAssignment_3; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_3_0() { return cActionsActionParserRuleCall_3_0; }
		
		//transition=Transition
		public Assignment getTransitionAssignment_4() { return cTransitionAssignment_4; }
		
		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_4_0() { return cTransitionTransitionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.si5.dsl.arduino.ArduinoML.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActuatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cActuatorActuatorCrossReference_0_0 = (CrossReference)cActuatorAssignment_0.eContents().get(0);
		private final RuleCall cActuatorActuatorIDTerminalRuleCall_0_0_1 = (RuleCall)cActuatorActuatorCrossReference_0_0.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSignalEnumRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Action:
		//	actuator=[Actuator] '<=' value=Signal;
		@Override public ParserRule getRule() { return rule; }
		
		//actuator=[Actuator] '<=' value=Signal
		public Group getGroup() { return cGroup; }
		
		//actuator=[Actuator]
		public Assignment getActuatorAssignment_0() { return cActuatorAssignment_0; }
		
		//[Actuator]
		public CrossReference getActuatorActuatorCrossReference_0_0() { return cActuatorActuatorCrossReference_0_0; }
		
		//ID
		public RuleCall getActuatorActuatorIDTerminalRuleCall_0_0_1() { return cActuatorActuatorIDTerminalRuleCall_0_0_1; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }
		
		//value=Signal
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Signal
		public RuleCall getValueSignalEnumRuleCall_2_0() { return cValueSignalEnumRuleCall_2_0; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.si5.dsl.arduino.ArduinoML.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSensorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSensorSensorCrossReference_0_0 = (CrossReference)cSensorAssignment_0.eContents().get(0);
		private final RuleCall cSensorSensorIDTerminalRuleCall_0_0_1 = (RuleCall)cSensorSensorCrossReference_0_0.eContents().get(1);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSignalEnumRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNextAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cNextStateCrossReference_4_0 = (CrossReference)cNextAssignment_4.eContents().get(0);
		private final RuleCall cNextStateIDTerminalRuleCall_4_0_1 = (RuleCall)cNextStateCrossReference_4_0.eContents().get(1);
		
		//Transition:
		//	sensor=[Sensor] 'is' value=Signal '=>' next=[State];
		@Override public ParserRule getRule() { return rule; }
		
		//sensor=[Sensor] 'is' value=Signal '=>' next=[State]
		public Group getGroup() { return cGroup; }
		
		//sensor=[Sensor]
		public Assignment getSensorAssignment_0() { return cSensorAssignment_0; }
		
		//[Sensor]
		public CrossReference getSensorSensorCrossReference_0_0() { return cSensorSensorCrossReference_0_0; }
		
		//ID
		public RuleCall getSensorSensorIDTerminalRuleCall_0_0_1() { return cSensorSensorIDTerminalRuleCall_0_0_1; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//value=Signal
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Signal
		public RuleCall getValueSignalEnumRuleCall_2_0() { return cValueSignalEnumRuleCall_2_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }
		
		//next=[State]
		public Assignment getNextAssignment_4() { return cNextAssignment_4; }
		
		//[State]
		public CrossReference getNextStateCrossReference_4_0() { return cNextStateCrossReference_4_0; }
		
		//ID
		public RuleCall getNextStateIDTerminalRuleCall_4_0_1() { return cNextStateIDTerminalRuleCall_4_0_1; }
	}
	
	public class SignalElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.si5.dsl.arduino.ArduinoML.Signal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHIGHEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHIGHHIGHKeyword_0_0 = (Keyword)cHIGHEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLOWEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLOWLOWKeyword_1_0 = (Keyword)cLOWEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Signal:
		//	HIGH | LOW;
		public EnumRule getRule() { return rule; }
		
		//HIGH | LOW
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HIGH
		public EnumLiteralDeclaration getHIGHEnumLiteralDeclaration_0() { return cHIGHEnumLiteralDeclaration_0; }
		
		//'HIGH'
		public Keyword getHIGHHIGHKeyword_0_0() { return cHIGHHIGHKeyword_0_0; }
		
		//LOW
		public EnumLiteralDeclaration getLOWEnumLiteralDeclaration_1() { return cLOWEnumLiteralDeclaration_1; }
		
		//'LOW'
		public Keyword getLOWLOWKeyword_1_0() { return cLOWLOWKeyword_1_0; }
	}
	
	private final AppElements pApp;
	private final BrickElements pBrick;
	private final ActuatorElements pActuator;
	private final SensorElements pSensor;
	private final StateElements pState;
	private final ActionElements pAction;
	private final TransitionElements pTransition;
	private final SignalElements eSignal;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ArduinoMLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pApp = new AppElements();
		this.pBrick = new BrickElements();
		this.pActuator = new ActuatorElements();
		this.pSensor = new SensorElements();
		this.pState = new StateElements();
		this.pAction = new ActionElements();
		this.pTransition = new TransitionElements();
		this.eSignal = new SignalElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.polytech.si5.dsl.arduino.ArduinoML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//App:
	//	'app' name=ID 'initial' 'state' initial=[State]
	//	'{'
	//	'bricks'
	//	bricks+=Brick
	//	bricks+=Brick*
	//	'states'
	//	states+=State
	//	states+=State*
	//	'}';
	public AppElements getAppAccess() {
		return pApp;
	}
	
	public ParserRule getAppRule() {
		return getAppAccess().getRule();
	}
	
	//Brick:
	//	(Actuator | Sensor) name=ID ':' pin=INT;
	public BrickElements getBrickAccess() {
		return pBrick;
	}
	
	public ParserRule getBrickRule() {
		return getBrickAccess().getRule();
	}
	
	//Actuator:
	//	{Actuator}
	//	'Actuator';
	public ActuatorElements getActuatorAccess() {
		return pActuator;
	}
	
	public ParserRule getActuatorRule() {
		return getActuatorAccess().getRule();
	}
	
	//Sensor:
	//	{Sensor}
	//	'Sensor';
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//State:
	//	name=ID '{'
	//	actions+=Action
	//	actions+=Action*
	//	transition=Transition
	//	'}';
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Action:
	//	actuator=[Actuator] '<=' value=Signal;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Transition:
	//	sensor=[Sensor] 'is' value=Signal '=>' next=[State];
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//enum Signal:
	//	HIGH | LOW;
	public SignalElements getSignalAccess() {
		return eSignal;
	}
	
	public EnumRule getSignalRule() {
		return getSignalAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
