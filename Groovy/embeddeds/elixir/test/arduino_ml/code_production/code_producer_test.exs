defmodule ArduinoML.CodeProducerTest do
  use ExUnit.Case
  doctest ArduinoML.CodeProducer

  import ArduinoML

  test "Should translate well a minimalistic application" do
    application "Testing!"

    sensor button: 1
    actuator led: 2
    
    state :released, on_entry: :led ~> :low
    state :pressed, on_entry: :led ~> :high

    transition from: :released, to: :pressed, when: is_high?(:button)
    transition from: :pressed, to: :released, when: is_low?(:button)

    expected = """
    // generated by ArduinoML #Elixir.

    // Bricks <~> Pins.
    int BUTTON = 1;
    int LED = 2;

    // Setup the inputs and outputs.
    void setup() {
      pinMode(BUTTON, INPUT);

      pinMode(LED, OUTPUT);
    }

    // Static setup code.
    int currentState = 1;

    // States declarations.
    void state_pressed() {
      digitalWrite(LED, HIGH);

      if (digitalRead(BUTTON) == LOW) {
        currentState = 1;
      }
    }

    void state_released() {
      digitalWrite(LED, LOW);

      if (digitalRead(BUTTON) == HIGH) {
        currentState = 0;
      }
    }

    // This function specifies the first state.
    void loop() {
      if (currentState == 0) {
        state_pressed();
      } else if (currentState == 1) {
        state_released();
      } else {
        /* Not supposed to arrive here. */
      }
    }
    """

    assert ArduinoML.CodeProducer.to_code(application!()) == expected
  end
  
end
