;;;;
;;;; arduino.stk         -- ArduinoML en Scheme
;;;;
;;;;           Author: Erick Gallesio [eg@unice.fr]
;;;;    Creation date: 26-Oct-2017 17:16
;;;; Last file update:  4-Dec-2017 17:53 (eg)
;;;;

;; ======================================================================
;;                    Compatibility functions
;; ======================================================================
(define keyword-get
  (cond-expand
   (stklos key-get)
   (gauche (lambda (lst key default) (get-keyword key lst default)))
   (else   (lambda (lst key default)
             (if (pair? lst)
                 (cond
                   ((null? (cdr lst))
                    (error "malformed list of keywords"))
                   ((eq? (car lst) key)
                    (cadr lst))
                   (else
                    (keyword-get (cddr lst) key default)))
                 default)))))
(define print
  (cond-expand
   ((or guile gauche)  (lambda args (apply format #t args)))
   (else               printf)))

(define eprint
  (cond-expand
   ((or guile gauche)  (lambda args (display (apply format #f args) (current-error-port))))
   (else               eprintf)))

;; ======================================================================
;;          A quick and dirty configuration check
;; ======================================================================
(define (check-config sensors actuators states transitions initial)
  (let* ((bricks      (append sensors actuators))
         (vars        (map car bricks))
         (ports       (map cadr bricks))
         (state-names (map car states)))

    (define (check-list lst)
      (or (null? lst)
          (and (car lst) (check-list (cdr lst)))))

    (define (err msg . args)
      (apply eprint (string-append "ERROR: " msg "\n") args)
      #f)

    (define (check-no-duplicates msg lst)
      (or (null? lst)
          (if (member (car lst) (cdr lst))
              (err "~A ~S is already used" msg (car lst))
              (check-no-duplicates msg (cdr lst)))))

    (define (check-initial initial)
      (or (member initial state-names)
          (if initial
              (err "bad initial name: ~S" initial)
              (err "initial state not defined"))))

    (define (check-action action)
      (if (not (and (= (length action) 3) (eq? (car action) 'set!)))
          (err "malformed action: ~A" action)
          (or (member (cadr action) vars)
              (err "undeclared variable ~A in action" (cadr action)))))

    (define (check-state state)
      (check-list (map check-action (cdr state))))

    (define (check-transition tr)
      (if (not (and (= (length tr) 6)
                    (eq? (list-ref tr 1) '->)
                    (eq? (list-ref tr 3) 'when)))
          (err "malformed transition: ~A" tr)
          (and (or (member (list-ref tr 0) state-names)
                   (err "from state not declared ~A" (list-ref tr 0)))
               (or (member (list-ref tr 2) state-names)
                   (err "from state not declared ~A" (list-ref tr 2)))
               (or (member (list-ref tr 4) vars)
                   (err "undeclared variable ~A in transition" (list-ref tr 4))))))
    ;;
    ;; check config starts here (return #t if configuration is OK, #f otherwise
    ;;
    (check-list
     `( ,(check-no-duplicates "name" vars)              ;; Ckeck bricks
        ,(check-no-duplicates "port" ports)

        ,(check-initial initial)                        ;; Check initial

        ,(check-no-duplicates "state" state-names)      ;; Checks states
        ,@(map check-state states)

        ,(map check-transition transitions)))))          ;; Check transitions


;; ======================================================================
;;                    Code generation
;; ======================================================================
(define (produce-code sensors actuators states transitions initial)

  (define (generate-header)
    (print "// File generated by arduinoML (Scheme)\n\n")
    (print "long time = 0;\n")
    (print "long debounce = 200;\n\n"))

  (define (generate-globals sensors actuators)
    (for-each (lambda (x) (print "int ~S = ~S;\n" (car x) (cadr x)))
              (append sensors actuators))
    (print "\n"))

  (define (generate-setup sensors actuators)
    (print "void setup() {\n")
    (for-each (lambda (x) (print "  pinMode(~S, \"INPUT\");\n"  (car x))) sensors)
    (for-each (lambda (x) (print "  pinMode(~S, \"OUTPUT\");\n" (car x))) actuators)
    (print "}\n\n"))

  (define (find-transition name transitions)
    (if (null? transitions)
        '()
        (if (eq? (caar transitions) name)
            (car transitions)
            (find-transition name (cdr transitions)))))

  (define (generate-actions actions)
    (for-each (lambda (action)
                (print "  digitalWrite(~A, ~A);\n" (cadr action) (caddr action)))
              actions))

  (define (generate-states states trans)
    (for-each (lambda (state)
                (let* ((name    (car state))
                       (actions (cdr state))
                       (trans   (find-transition name trans))
                       (from    (car trans))
                       (to      (caddr trans))
                       (when    (cddddr trans)))
                  (print "void state_~S() {\n" name)
                  (generate-actions actions)
                  (print "  boolean guard =  millis() - time > debounce;\n")
                  (print "  if (digitalRead(~A) == ~A  && guard) {\n"
                         (car when) (cadr when))
                  (print "    time = millis()\n")
                  (print "    state_~A();\n" to)
                  (print "  } else {\n")
                  (print "    state_~A();\n" from)
                  (print "  }\n")
                  (print "}\n\n")))
              states))

  (define (generate-loop initial)
    (print "void loop () {\n")
    (print "   state_~A();\n" initial)
    (print "}\n"))

  ;;
  ;; produce-code starts here
  ;;
  (generate-header)
  (generate-globals sensors actuators)
  (generate-setup   sensors actuators)
  (generate-states  states transitions)
  (generate-loop    initial))


;; ======================================================================
;; DEFINE-APPLICATION MACRO
;; ======================================================================
(define-macro (define-application names . clauses)
  (let ((sensors     (keyword-get clauses ':sensors '()))
        (actuators   (keyword-get clauses ':actuators '()))
        (states      (keyword-get clauses ':states '()))
        (transitions (keyword-get clauses ':transitions '()))
        (initial     (keyword-get clauses ':initial #f)))

    (when (check-config sensors actuators states transitions initial)
      (produce-code sensors actuators states transitions initial))))
