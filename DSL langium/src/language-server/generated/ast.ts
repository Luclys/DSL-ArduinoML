/******************************************************************************
 * This file was generated by langium-cli 0.2.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { AstNode, AstReflection, isAstNode } from 'langium';

export interface Action extends AstNode {
    readonly $container: State;
    name: string
    value: Value
}

export const Action = 'Action';

export function isAction(item: unknown): item is Action {
    return reflection.isInstance(item, Action);
}

export interface App extends AstNode {
    Bricks: Array<Brick>
    initial: string
    name: string
    States: Array<State>
}

export const App = 'App';

export function isApp(item: unknown): item is App {
    return reflection.isInstance(item, App);
}

export interface Brick extends AstNode {
    readonly $container: App;
    name: string
    pin: number
}

export const Brick = 'Brick';

export function isBrick(item: unknown): item is Brick {
    return reflection.isInstance(item, Brick);
}

export interface Condition extends AstNode {
    readonly $container: Conditions;
    sensor: string
}

export const Condition = 'Condition';

export function isCondition(item: unknown): item is Condition {
    return reflection.isInstance(item, Condition);
}

export interface Conditions extends AstNode {
    readonly $container: Transition | Conditions;
    leftCondition: Condition
    operator: Operator
    rightConditions: Conditions
}

export const Conditions = 'Conditions';

export function isConditions(item: unknown): item is Conditions {
    return reflection.isInstance(item, Conditions);
}

export interface State extends AstNode {
    readonly $container: App;
    Actions: Array<Action>
    name: string
    Transitions: Array<Transition>
}

export const State = 'State';

export function isState(item: unknown): item is State {
    return reflection.isInstance(item, State);
}

export interface Transition extends AstNode {
    readonly $container: State;
    conditions: Conditions
    goto: string
}

export const Transition = 'Transition';

export function isTransition(item: unknown): item is Transition {
    return reflection.isInstance(item, Transition);
}

export interface Actuator extends Brick {
}

export const Actuator = 'Actuator';

export function isActuator(item: unknown): item is Actuator {
    return reflection.isInstance(item, Actuator);
}

export interface Sensor extends Brick {
}

export const Sensor = 'Sensor';

export function isSensor(item: unknown): item is Sensor {
    return reflection.isInstance(item, Sensor);
}

export interface AnalogCondition extends Condition {
    analogOp: AnalogOperator
    value: number
}

export const AnalogCondition = 'AnalogCondition';

export function isAnalogCondition(item: unknown): item is AnalogCondition {
    return reflection.isInstance(item, AnalogCondition);
}

export interface DigitalCondition extends Condition {
    value: Value
}

export const DigitalCondition = 'DigitalCondition';

export function isDigitalCondition(item: unknown): item is DigitalCondition {
    return reflection.isInstance(item, DigitalCondition);
}

export type Value = 'ON' | 'OFF'

export type Operator = 'OR' | 'AND'

export type AnalogOperator = '<' | '<=' | '==' | '!=' | '>=' | '>'

export type EasyLanguageArduinoAstType = 'Action' | 'App' | 'Brick' | 'Condition' | 'Conditions' | 'State' | 'Transition' | 'Actuator' | 'Sensor' | 'AnalogCondition' | 'DigitalCondition';

export type EasyLanguageArduinoAstReference = never;

export class EasyLanguageArduinoAstReflection implements AstReflection {

    getAllTypes(): string[] {
        return ['Action', 'App', 'Brick', 'Condition', 'Conditions', 'State', 'Transition', 'Actuator', 'Sensor', 'AnalogCondition', 'DigitalCondition'];
    }

    isInstance(node: unknown, type: string): boolean {
        return isAstNode(node) && this.isSubtype(node.$type, type);
    }

    isSubtype(subtype: string, supertype: string): boolean {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            case Actuator:
            case Sensor: {
                return this.isSubtype(Brick, supertype);
            }
            case AnalogCondition:
            case DigitalCondition: {
                return this.isSubtype(Condition, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(referenceId: EasyLanguageArduinoAstReference): string {
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
}

export const reflection = new EasyLanguageArduinoAstReflection();
